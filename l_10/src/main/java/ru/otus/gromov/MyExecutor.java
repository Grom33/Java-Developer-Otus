package ru.otus.gromov;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

public class MyExecutor implements Executor {
    private Connection connection;

    public MyExecutor(Connection connection) {
        this.connection = connection;
    }

    public void save(Object object) {
        checkObjectType(object.getClass());
        initDb(object);
    }

    public Object load(long id, Class clazz) {
        checkObjectType(clazz);
        return null;
    }

    public void initDb(Object object) {
        StringBuilder query = new StringBuilder();
        query.append(String.format("CREATE TABLE IF NOT EXISTS %s (\"", object.getClass().getSimpleName()));
        query.append("id bigint generated by default as identity ");
        List<Field> fields = ReflectionHelper.getFields(object);
        fields.forEach((f) -> {
            if (!"id".equals(f.getName())) {
                query.append(String.format(" %s %s NOT NULL,", f.getName(), getSqlType(f.getType())));
            }
        });
        query.append(" primary key (id));");
        execute(query.toString());
        //System.out.println(query);


    }

    private void execute(String query) {
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(query);
            ResultSet result = stmt.getResultSet();
            handler.handle(result);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private String getSqlType(Class clazz) {
        if (int.class.isAssignableFrom(clazz)) return "int";
        if (long.class.isAssignableFrom(clazz)) return "bigint";
        if (double.class.isAssignableFrom(clazz)) return "float";
        if (String.class.isAssignableFrom(clazz)) return "varchar(255)";
        if (boolean.class.isAssignableFrom(clazz)) return "boolean";
        return "varchar(255)";
    }

    private void checkObjectType(Class clazz) {
        if (!DataSet.class.isAssignableFrom(clazz)) throw new WrongTypeException();
    }

    public MyExecutor() {
    }
}
