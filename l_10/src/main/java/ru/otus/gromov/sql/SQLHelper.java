package ru.otus.gromov.sql;

import ru.otus.gromov.reflection.ReflectionHelper;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

public class SQLHelper {
	public static String buildQuery(Object object) {
		String initQuery = getInitQuery(object);
		String valuesQuery = getValueQuery(object);
		StringBuilder resultQuery = new StringBuilder();
		resultQuery.append(initQuery);
		resultQuery.append("\n");
		resultQuery.append(valuesQuery);
		return resultQuery.toString().toUpperCase();
	}


	private static String getValueQuery(Object object) {
		List<Field> fields = ReflectionHelper.getFields(object);
		return String.format("INSERT INTO %s (%s) VALUES (%s);",
				object.getClass().getSimpleName(),
				fields.stream()
						.map(Field::getName)
						.collect(Collectors.joining(", ")),
				fields.stream()
						.map(field -> wrapString(ReflectionHelper.getFieldValueByField(object, field)))
						.collect(Collectors.joining(", "))

		);
	}

	private static String getInitQuery(Object object) {
		List<Field> fields = ReflectionHelper.getFields(object);
		StringBuilder initQuery = new StringBuilder();
		initQuery.append(String.format("CREATE TABLE IF NOT EXISTS %s (", object.getClass().getSimpleName()));
		initQuery.append("id bigint generated by default as identity, ");
		fields.forEach((f) -> {
			if (!"id".equals(f.getName())) {
				initQuery.append(String.format(" %s %s,", f.getName(), getSqlType(f.getType())));
			}
		});
		initQuery.append(" primary key (id));");
		return initQuery.toString();
	}

	private static String getSqlType(Class clazz) {
		if (int.class.isAssignableFrom(clazz)) return "int";
		if (long.class.isAssignableFrom(clazz)) return "bigint";
		if (float.class.isAssignableFrom(clazz)) return "float";
		if (double.class.isAssignableFrom(clazz)) return "float";
		if (String.class.isAssignableFrom(clazz)) return "varchar(255)";
		if (boolean.class.isAssignableFrom(clazz)) return "boolean";
		return "varchar(255)";
	}

	private static String wrapString(Object object) {
		if (object instanceof String) return String.format("'%s'", object);
		return object.toString();
	}

	public static <T> T execute(String sql, SqlExecutor<T> executor) {
		try (Connection conn = ConnectionHelper.getConnection("sa", "");
		     PreparedStatement ps = conn.prepareStatement(sql)) {
			return executor.execute(ps);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	public static <T> T transactionalExecute(SqlTransaction<T> executor){
		try (Connection conn = ConnectionHelper.getConnection("sa", "")) {
			try {
				conn.setAutoCommit(false);
				T res = executor.execute(conn);
				conn.commit();
				return res;
			} catch (SQLException e) {
				conn.rollback();
				throw new RuntimeException(e);
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}



	public static void doQuery(String sql, Connection connection) {
		execute(sql, PreparedStatement::execute);
	}
}
